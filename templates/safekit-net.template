{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates the network resources needed by safekit-mirror or safekit-farm template.",
    "Parameters": {
    "VpcId" : {
            "Description": "Id of VPC",
            "Type": "AWS::EC2::VPC::Id"
        },
        "NumberOfInstances": {
            "AllowedValues": [
                "2",
                "3",
                "4"
            ],
            "Default": "2",
            "Description": "Number of EC2 instances to create",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "0.0.0.0/0 will allow access from ANY IP address",
            "Type": "String"
        },
        "RemoteAccessPort": {
            "Description": "Port for romte admin access",
            "Type": "Number",
            "Default": 9453,
            "MinValue" : 1,
            "MaxValue" : 49151
        },
        "HealthURL": {
            "Description": "Module name",
            "Type": "String"
        },
        "VipPort": {
            "Description": "Port of the Virtual IP which is load balanced",
            "Type": "Number",
            "Default": 9453,
            "MinValue" : 1,
            "MaxValue" : 49151
        },
        "VipCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "0.0.0.0/0 will allow access from ANY IP address",
            "Type": "String",
            "Default": "0.0.0.0/0"
        },
        "PublicSubnet1ID": {
            "Description": "ID of the Public Subnet 1",
            "Type": "String",
            "Default": ""
        },
        "PublicSubnet2ID": {
            "Description": "ID of the Public Subnet 2",
            "Type": "String",
            "Default": ""
        },
        "PublicSubnet3ID": {
            "Description": "ID of the Public Subnet 3",
            "Type": "String",
            "Default": "-"
        },
        "PublicSubnet4ID": {
            "Description": "ID of the Public Subnet 4",
            "Type": "String",
            "Default": "-"
        }
    },
    "Conditions": {
        "VipPortCond": {
            "Fn::Not": [{
            "Fn::Equals": [
                { "Ref": "VipPort" },
                9453
            ]
            }]
        },
        "2AZCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [ { "Ref": "NumberOfInstances" }, "2" ]
                },
                {
                    "Condition": "3AZCondition"
                }
            ]
        },
        "3AZCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [ {"Ref": "NumberOfInstances" }, "3" ]
                },
                {
                    "Condition": "4AZCondition"
                }
            ]
        },
        "4AZCondition": {
            "Fn::Equals": [ { "Ref": "NumberOfInstances" }, "4" ]
        }
    },
    "Resources": {
        "SafeKitInstanceSecurityGroup" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "VpcId" :  { "Ref": "VpcId" },
                "GroupDescription" : "Enable SafeKit WebConsole , SSH access, and inter server traffic",
                "SecurityGroupIngress" :  [
                    { "Description" : "Remote admin" , "IpProtocol" : "tcp", "FromPort" : { "Ref": "RemoteAccessPort" }, "ToPort" :  { "Ref": "RemoteAccessPort" }, "CidrIp" : { "Ref": "RemoteAccessCIDR" } } ,
                    { "Description" : "SafeKit Cert server" , "IpProtocol" : "tcp", "FromPort" : 9001, "ToPort" : 9001, "CidrIp" : { "Ref": "RemoteAccessCIDR" } },
                    { "Description" : "SafeKit Web Console" , "IpProtocol" : "tcp", "FromPort" : 9453, "ToPort" : 9453, "CidrIp" : { "Ref": "RemoteAccessCIDR" } },
                    { "Fn::If" :    [ "VipPortCond" , 
                        { "Description" : "SafeKit Vip" , "IpProtocol" : "tcp", "FromPort" : { "Ref" : "VipPort" }, "ToPort" : { "Ref" : "VipPort" }, "CidrIp" : { "Ref": "VipCIDR" } },
                        {"Ref" : "AWS::NoValue"}
                     ] },
                    { "IpProtocol" : "tcp", "FromPort" : 0 , "ToPort" : 65535 ,"CidrIp" : "10.0.0.0/16" },                        
                    { "IpProtocol" : "udp", "FromPort" : 0 , "ToPort" : 65535 ,"CidrIp" : "10.0.0.0/16" },                        
                    { "IpProtocol" : "icmp", "FromPort" : -1 , "ToPort" : -1 , "CidrIp" : "10.0.0.0/16" }                    
                 ]
              }
        },
        "LoadBalancerAppli": {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {    
                "Type" : "network",
                "Scheme" : "internet-facing",
                "LoadBalancerAttributes" : [ { "Key" : "load_balancing.cross_zone.enabled" , "Value" : "true" } ],
                "Subnets" : [ 
                            { "Ref": "PublicSubnet1ID" } ,            
                            { "Fn::If" : [ "2AZCondition", { "Ref" : "PublicSubnet2ID" } , {"Ref" : "AWS::NoValue"} ]},                
                            { "Fn::If" : [ "3AZCondition", { "Ref" : "PublicSubnet3ID" } , {"Ref" : "AWS::NoValue"} ]},                
                            { "Fn::If" : [ "4AZCondition", { "Ref" : "PublicSubnet4ID" } , {"Ref" : "AWS::NoValue"} ]}                
                            ]
            }
        },
        "ListenerAppli": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [{"Type": "forward","TargetGroupArn": { "Ref": "TargetGroupAppli" }}],
                "LoadBalancerArn": { "Ref": "LoadBalancerAppli" },
                "Port": { "Ref" : "VipPort" },
                "Protocol": "TCP"
            }
        },
        "TargetGroupAppli" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "VpcId": { "Ref": "VpcId" },
                "Port": { "Ref" : "VipPort" },
                "Protocol": "TCP",
                "TargetType" : "ip",
                "Targets": [ 
                            { "Id": "10.0.1.10" } ,            
                            { "Fn::If" : [ "2AZCondition",  { "Id": "10.0.2.10" } , {"Ref" : "AWS::NoValue"} ]},                
                            { "Fn::If" : [ "3AZCondition",  { "Id": "10.0.3.10" } , {"Ref" : "AWS::NoValue"} ]},                
                            { "Fn::If" : [ "4AZCondition",  { "Id": "10.0.4.10" } , {"Ref" : "AWS::NoValue"} ]}                
                            ],
                "HealthCheckIntervalSeconds": 10,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 2,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckPort" : "9010",
                "HealthCheckPath" : { "Ref": "HealthURL" } 
            }
        }
    },
    "Outputs": {
       "SecurityGroup": {
            "Description": "Security Group",
            "Value": { "Ref" : "SafeKitInstanceSecurityGroup" }
       },
       "DNSName": {
            "Description": "LoadBalancer DNS Name",
            "Value":  { "Fn::GetAtt" : [ "LoadBalancerAppli" , "DNSName"  ]  }
       }
    }
}
