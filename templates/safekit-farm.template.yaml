AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates a  SafeKit Farm Cluster  installed in up to four availability
  zones in one region. **WARNING** This template creates AWS resources. You will be
  billed for the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - NumberOfInstances
          - AvailabilityZones
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PublicSubnet4CIDR
          - RemoteAccessCIDR
          - VipCIDR
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - InstanceType
          - OSType
      - Label:
          default: Evidian SafeKit – farm cluster configuration
        Parameters:
          - SafekitModuleName
          - InstanceNamePrefix
          - VipPort
          - CAservPwd
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      NumberOfInstances:
        default: Number of instances
      AvailabilityZones:
        default: Availability Zones
      InstanceType:
        default: Instance type
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PublicSubnet3CIDR:
        default: Public subnet 3 CIDR
      PublicSubnet4CIDR:
        default: Public subnet 4 CIDR
      OSType:
        default: Operating system
      RemoteAccessCIDR:
        default: Allowed CIDR for SafeKit environment
      KeyPairName:
        default: Key pair name
      CAservPwd:
        default: Password
      SafekitModuleName:
        default: SafeKit module name
      InstanceNamePrefix:
        default: Instance name prefix
      VipPort:
        default: Virtual IP port
      VipCIDR:
        default: Allowed CIDR for virtual IP access to SafeKit web console
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      QSS3BucketName:
        default: Quick Start S3 bucket name
Parameters:
  NumberOfInstances:
    AllowedValues:
      - '2'
      - '3'
      - '4'
    Default: '2'
    Description: Number of EC2 instances to create.
    Type: String
  AvailabilityZones:
    Description: Set as many Availability Zones as there are instances.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2.
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone 3.
    Type: String
  PublicSubnet4CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.176.0/20
    Description: CIDR block for the public DMZ subnet 4 located in Availability Zone 4.
    Type: String
  InstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m4.large
    Default: t2.small
    Description: Choose the Amazon EC2 instance type.
    Type: String
  KeyPairName:
    Description: Enter the public/private key pair you created in your preferred AWS Region; see the “Technical requirements” section of the deployment guide.
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: .+
    ConstraintDescription: Key pair name must not be empty.
  CAservPwd:
    Description: Password for SafeKit web console certificates. Must be at least 8 characters long and contain at least 1 uppercase letter, 1 lowercase letter, and 1 number. Do not use quotation marks, backslashes, forward slashes, or the @ symbol.
    Type: String
    MinLength: 8
    NoEcho: true
    AllowedPattern: ^(?=.*?[a-z])(?=.*?[A-Z])(?=.*[0-9]).*
    ConstraintDescription: Certificate server password must be at least 8 characters long and contain at least one uppercase character and number.
  OSType:
    AllowedValues:
      - Linux
      - Windows
    Default: Linux
    Description: Choose Windows to change the operating system.
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Enter the CIDR IP range that is permitted to access SafeKit environment. Set this value to a trusted IP range. For example, you might grant access only to your corporate network.
    Type: String
  SafekitModuleName:
    Description: The name of the SafeKit module you're deploying. This is not editable.
    AllowedValues:
      - farm
    Default: farm
    Type: String
  VipPort:
    Description: The port of the virtual IP that is used for failover of the SafeKit mirror. Enter a port 1–49151.
    Type: Number
    Default: 9453
    MinValue: 1
    MaxValue: 49151
  VipCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Enter the CIDR IP range that is permitted to access SafeKit web console. Set this value to a trusted IP range. For example, you might grant access only to your corporate network.
    Type: String
  InstanceNamePrefix:
    Description: The prefix in the SafeKit web console for each instance name. Enter a different name if required for your configuration.
    Default: server
    Type: String
  QSS3BucketName:
    Default: aws-quickstart
    Description: The S3 bucket that you created for your copy of Quick Start assets. Use this if you decide to customize the Quick Start. This bucket name can include numbers, lowercase letters, uppercase letters, and hyphens but should not start or end with a hyphen.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-atos-evidian-safekit/
    Description: The S3 key name prefix that is used to simulate a folder for your copy of Quick Start assets. Use this if you decide to customize the Quick Start. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html.
    Type: String
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  LinuxCond: !Equals
    - !Ref 'OSType'
    - Linux
  2AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfInstances'
      - '2'
    - !Condition '3AZCondition'
  3AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfInstances'
      - '3'
    - !Condition '4AZCondition'
  4AZCondition: !Equals
    - !Ref 'NumberOfInstances'
    - '4'
Mappings:
  InstancesMap:
    '1':
      Wait: 0
    '2':
      Wait: 1
    '3':
      Wait: 2
    '4':
      Wait: 3
Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZones: !Join
          - ','
          - !Ref 'AvailabilityZones'
        PublicSubnet1CIDR: !Ref 'PublicSubnet1CIDR'
        PublicSubnet2CIDR: !Ref 'PublicSubnet2CIDR'
        PublicSubnet3CIDR: !Ref 'PublicSubnet3CIDR'
        PublicSubnet4CIDR: !Ref 'PublicSubnet4CIDR'
        KeyPairName: !Ref 'KeyPairName'
        NumberOfAZs: !Ref 'NumberOfInstances'
        CreatePrivateSubnets: 'false'
  NetStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-net.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        VpcId: !GetAtt 'VPCStack.Outputs.VPCID'
        VPCCIDR: !GetAtt 'VPCStack.Outputs.VPCCIDR'
        NumberOfInstances: !Ref 'NumberOfInstances'
        RemoteAccessCIDR: !Ref 'RemoteAccessCIDR'
        RemoteAccessPort: !If
          - LinuxCond
          - 22
          - 3389
        VipCIDR: !Ref 'VipCIDR'
        VipPort: !Ref 'VipPort'
        HealthURL: !Sub '/var/modules/${SafekitModuleName}/ready.txt'
        PublicSubnet1ID: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
        PrivateIp1 : !Sub
          - '${A}.${B}.${C}.10'
          - A: !Select [0, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet1CIDR' ]]
            B: !Select [1, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet1CIDR' ]]
            C: !Select [2, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet1CIDR' ]]
        PublicSubnet2ID: !If
          - 2AZCondition
          - !GetAtt 'VPCStack.Outputs.PublicSubnet2ID'
          - !Ref 'AWS::NoValue'
        PrivateIp2: !If
          - 2AZCondition
          - !Sub
            - '${A}.${B}.${C}.10'
            - A: !Select [0, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet2CIDR' ]]
              B: !Select [1, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet2CIDR' ]]
              C: !Select [2, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet2CIDR' ]]
          - !Ref 'AWS::NoValue'
        PublicSubnet3ID: !If
          - 3AZCondition
          - !GetAtt 'VPCStack.Outputs.PublicSubnet3ID'
          - !Ref 'AWS::NoValue'
        PrivateIp3: !If
          - 3AZCondition
          - !Sub
            - '${A}.${B}.${C}.10'
            - A: !Select [0, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet3CIDR' ]]
              B: !Select [1, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet3CIDR' ]]
              C: !Select [2, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet3CIDR' ]]
          - !Ref 'AWS::NoValue'
        PublicSubnet4ID: !If
          - 4AZCondition
          - !GetAtt 'VPCStack.Outputs.PublicSubnet4ID'
          - !Ref 'AWS::NoValue'
        PrivateIp4: !If
          - 4AZCondition
          - !Sub
            - '${A}.${B}.${C}.10'
            - A: !Select [0, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet4CIDR' ]]
              B: !Select [1, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet4CIDR' ]]
              C: !Select [2, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet4CIDR' ]]
          - !Ref 'AWS::NoValue'
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP2:
    Condition: 2AZCondition
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP3:
    Condition: 3AZCondition
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP4:
    Condition: 4AZCondition
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  StackInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AccessToS3Bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:*Object
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                    - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  StackInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: StackInstanceRole
    Properties:
      Path: /
      Roles:
        - !Ref StackInstanceRole
  Instance1Stack:
    Type: AWS::CloudFormation::Stack
    Metadata:
      PseudoDependsOn:
        - !If [2AZCondition, !Ref 'Instance2Stack', !Ref 'AWS::NoValue']
        - !If [3AZCondition, !Ref 'Instance2Stack', !Ref 'AWS::NoValue']
        - !If [4AZCondition, !Ref 'Instance2Stack', !Ref 'AWS::NoValue']
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-base-${OSType}.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZone: !Select
          - '0'
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
        CAservPwd: !Ref 'CAservPwd'
        CertificateCN: !Sub
          - 'SafeKit CA ${X} Stack'
          - X: !Select [2, !Split ["/", !Ref 'AWS::StackId' ]]
        InstanceType: !Ref 'InstanceType'
        InstanceNum: '1'
        InstanceName: !Sub '${InstanceNamePrefix}1'
        StackInstanceProfile: !Ref 'StackInstanceProfile'
        StackInstanceRole: !Ref 'StackInstanceRole'
        SecurityGroup: !GetAtt 'NetStack.Outputs.SecurityGroup'
        PublicSubnet: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
        PrivateAddr: !GetAtt 'NetStack.Outputs.PrivateIp1'
        EIPAllocationId: !GetAtt 'EIP1.AllocationId'
        SafekitModuleURL: !Sub 'https://support.evidian.com/solutions/downloads/safekit/cloud/application_modules/${OSType}/farm.safe'
        SafekitModuleName: !Ref 'SafekitModuleName'
        Userconfig: 'userconfig-farm.xml'
        ClusterFile: !Join
          - "\n"
          - - <?xml version="1.0" encoding="utf-8"?>
            - <cluster><lans>
            - <lan name="console" console="on" command="off" framework="off">
            - !Sub '<node name="${InstanceNamePrefix}1" addr="${EIP1}"/>'
            - !If
              - 2AZCondition
              - !Sub '<node name="${InstanceNamePrefix}2" addr="${EIP2}"/>'
              - !Ref 'AWS::NoValue'
            - !If
              - 3AZCondition
              - !Sub '<node name="${InstanceNamePrefix}3" addr="${EIP3}"/>'
              - !Ref 'AWS::NoValue'
            - !If
              - 4AZCondition
              - !Sub '<node name="${InstanceNamePrefix}4" addr="${EIP4}"/>'
              - !Ref 'AWS::NoValue'
            - </lan>
            - <lan name="default" console="on" command="on" framework="on">
            - !Sub '<node name="${InstanceNamePrefix}1" addr="${NetStack.Outputs.PrivateIp1}"/>'
            - !If
              - 2AZCondition
              - !Sub '<node name="${InstanceNamePrefix}2" addr="${NetStack.Outputs.PrivateIp2}"/>'
              - !Ref 'AWS::NoValue'
            - !If
              - 3AZCondition
              - !Sub '<node name="${InstanceNamePrefix}3" addr="${NetStack.Outputs.PrivateIp3}"/>'
              - !Ref 'AWS::NoValue'
            - !If
              - 4AZCondition
              - !Sub '<node name="${InstanceNamePrefix}4" addr="${NetStack.Outputs.PrivateIp4}"/>'
              - !Ref 'AWS::NoValue'
            - </lan>
            - </lans></cluster>
        ConfigScript: !If
          - LinuxCond
          - !Sub
            - |
              #!/bin/bash -ev
              mv /tmp/userconfig.xml /opt/safekit/modules/${SafekitModuleName}/conf/userconfig.xml
              /opt/safekit/safekit -H "*" -E ${SafekitModuleName}
              /opt/safekit/safekit -H "*" start -m ${SafekitModuleName}
            - SafekitModuleName: !Ref 'SafekitModuleName'
          - !Sub
            - |
              & move-item -path \safekit\var\tmp\userconfig.xml -destination \safekit\modules\${SafekitModuleName}\conf\userconfig.xml
              & /safekit/safekit -H "*" -E ${SafekitModuleName}
              & /safekit/safekit -H "*" start -m ${SafekitModuleName}
            - SafekitModuleName: !Ref 'SafekitModuleName'
        IpNamesList: !Sub "[\n\"${NetStack.Outputs.DNSName}\",\nnull\n]"
        ConsoleAddrList: !Join
          - ''
          - - "[\n"
            - !Sub "\"${NetStack.Outputs.PrivateIp1}\",\n\"${EIP1}\",\n"
            - !If
              - 2AZCondition
              - !Sub "\"${NetStack.Outputs.PrivateIp2}\",\n\"${EIP2}\",\n"
              - !Ref 'AWS::NoValue'
            - !If
              - 3AZCondition
              - !Sub "\"${NetStack.Outputs.PrivateIp3}\",\n\"${EIP3}\",\n"
              - !Ref 'AWS::NoValue'
            - !If
              - 4AZCondition
              - !Sub "\"${NetStack.Outputs.PrivateIp4}\",\n\"${EIP4}\",\n"
              - !Ref 'AWS::NoValue'
            - "null\n]"
        CommandAddrList: !Join
          - ''
          - - "[\n"
            - !If
              - 2AZCondition
              - !Sub "\"${NetStack.Outputs.PrivateIp2}\",\n"
              - !Ref 'AWS::NoValue'
            - !If
              - 3AZCondition
              - !Sub "\"${NetStack.Outputs.PrivateIp3}\",\n"
              - !Ref 'AWS::NoValue'
            - !If
              - 4AZCondition
              - !Sub "\"${NetStack.Outputs.PrivateIp4}\",\n"
              - !Ref 'AWS::NoValue'
            - "null\n]"
  Instance2Stack:
    Condition: 2AZCondition
    Metadata:
      PseudoDependsOn:
        - !If [3AZCondition, !Ref 'Instance3Stack', !Ref 'AWS::NoValue']
        - !If [4AZCondition, !Ref 'Instance3Stack', !Ref 'AWS::NoValue']
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-base-${OSType}.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZone: !Select
          - '1'
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
        CAservPwd: !Ref 'CAservPwd'
        InstanceType: !Ref 'InstanceType'
        InstanceNum: '2'
        InstanceName: !Sub '${InstanceNamePrefix}2'
        StackInstanceProfile: !Ref 'StackInstanceProfile'
        StackInstanceRole: !Ref 'StackInstanceRole'
        SecurityGroup: !GetAtt 'NetStack.Outputs.SecurityGroup'
        PublicSubnet: !GetAtt 'VPCStack.Outputs.PublicSubnet2ID'
        PrivateAddr: !GetAtt 'NetStack.Outputs.PrivateIp2'
        EIPAllocationId: !GetAtt 'EIP2.AllocationId'
  Instance3Stack:
    Condition: 3AZCondition
    Type: AWS::CloudFormation::Stack
    Metadata:
      PseudoDependsOn:
        - !If [4AZCondition, !Ref 'Instance4Stack', !Ref 'AWS::NoValue']
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-base-${OSType}.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZone: !Select
          - '2'
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
        CAservPwd: !Ref 'CAservPwd'
        InstanceType: !Ref 'InstanceType'
        InstanceNum: '3'
        InstanceName: !Sub '${InstanceNamePrefix}3'
        StackInstanceProfile: !Ref 'StackInstanceProfile'
        StackInstanceRole: !Ref 'StackInstanceRole'
        SecurityGroup: !GetAtt 'NetStack.Outputs.SecurityGroup'
        PublicSubnet: !GetAtt 'VPCStack.Outputs.PublicSubnet3ID'
        PrivateAddr: !GetAtt 'NetStack.Outputs.PrivateIp3'
        EIPAllocationId: !GetAtt 'EIP3.AllocationId'
  Instance4Stack:
    Condition: 4AZCondition
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-base-${OSType}.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZone: !Select
          - '3'
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
        CAservPwd: !Ref 'CAservPwd'
        InstanceType: !Ref 'InstanceType'
        InstanceNum: '4'
        InstanceName: !Sub '${InstanceNamePrefix}4'
        StackInstanceProfile: !Ref 'StackInstanceProfile'
        StackInstanceRole: !Ref 'StackInstanceRole'
        SecurityGroup: !GetAtt 'NetStack.Outputs.SecurityGroup'
        PublicSubnet: !GetAtt 'VPCStack.Outputs.PublicSubnet4ID'
        PrivateAddr: !GetAtt 'NetStack.Outputs.PrivateIp4'
        EIPAllocationId: !GetAtt 'EIP4.AllocationId'
Outputs:
  Server1:
    Description: Server 1 IP address
    Value: !Ref 'EIP1'
  Server2:
    Condition: 2AZCondition
    Description: Server 2 IP address
    Value: !Ref 'EIP2'
  Server3:
    Condition: 3AZCondition
    Description: Server 3 IP address
    Value: !Ref 'EIP3'
  Server4:
    Condition: 4AZCondition
    Description: Server 4 IP address
    Value: !Ref 'EIP4'
  CredentialsLogin:
    Description: 'Step 1. Get the credentials ( User : CA_admin, Password : Password
      for SafeKit web console certificates )'
    Value: !Join
      - ''
      - - https://
        - !Ref 'EIP1'
        - :9001/adduser.html
  WebConsole:
    Description: Step 2. Start the console
    Value: !Join
      - ''
      - - https://
        - !Ref 'EIP1'
        - :9453/deploy.html?firewallDialog=false
  VIPTest:
    Description: Step 3. Test the Virtual IP
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'NetStack.Outputs.DNSName'
        - :9453
        - !Sub '/cgi-bin/mosaic?arg0=${SafekitModuleName}&mode=mosaic'
  FQDN:
    Description: Virtal IP DNS name
    Value: !GetAtt 'NetStack.Outputs.DNSName'



