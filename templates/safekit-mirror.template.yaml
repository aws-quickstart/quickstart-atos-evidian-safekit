AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates a SafeKit Mirror Cluster installed in two availability zones
  in one region. **WARNING** This template creates AWS resources. You will be billed
  for the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - AvailabilityZones
          - RemoteAccessCIDR
          - VipCIDR
      - Label:
          default: Amazon EC2 Instances Configuration
        Parameters:
          - KeyPairName
          - InstanceType
          - OSType
      - Label:
          default: Evidian SafeKit â€“ Mirror Cluster Configuration
        Parameters:
          - SafekitModuleName
          - InstanceNamePrefix
          - VipPort
          - CAservPwd
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      InstanceType:
        default: Instance Type
      OSType:
        default: Operating System
      RemoteAccessCIDR:
        default: Allowed CIDR for SafeKit Console, SSH, RDP
      KeyPairName:
        default: Key Pair Name
      CAservPwd:
        default: Password
      SafekitModuleName:
        default: Safekit Module Name
      InstanceNamePrefix:
        default: Server Name Prefix
      VipPort:
        default: Virtual IP Port
      VipCIDR:
        default: Allowed CIDR for Virtual IP
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      QSS3BucketName:
        default: S3 Bucket Name
Parameters:
  AvailabilityZones:
    Description: Two zones must be set
    Type: List<AWS::EC2::AvailabilityZone::Name>
  InstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m4.large
    Default: t2.small
    Description: Amazon EC2 instance type.
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your EC2
      instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: .+
    ConstraintDescription: Key Pair Name must not be empty
  CAservPwd:
    Description: Password for SafeKit web console certificates
    Type: String
    MinLength: 8
    NoEcho: true
    AllowedPattern: ^(?=.*?[a-z])(?=.*?[A-Z])(?=.*[0-9]).*
    ConstraintDescription: Certificate server password must be at least 8 chars long and contain at least one uppercase char and number
  OSType:
    AllowedValues:
      - Linux
      - Windows
    Default: Linux
    Description: Operating system
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: '0.0.0.0/0 will allow access from ANY IP address'
    Default: '0.0.0.0/0'
    Type: String
  SafekitModuleName:
    Description: Module name
    Default: mirror
    Type: String
  VipPort:
    Description: Virtual IP TCP port switched in case of failure
    Type: Number
    Default: 9453
    MinValue: 1
    MaxValue: 49151
  VipCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: '0.0.0.0/0 will allow access from ANY IP address'
    Type: String
    Default: '0.0.0.0/0'
  InstanceNamePrefix:
    Description: Server name prefix in the SafeKit web console for each instance
    Default: Server
    Type: String
  QSS3BucketName:
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-evidian-safekit/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  LinuxCond: !Equals
    - !Ref 'OSType'
    - Linux
Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZones: !Join
          - ','
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        NumberOfAZs: '2'
        CreatePrivateSubnets: 'false'
  NetStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-net.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        VpcId: !GetAtt 'VPCStack.Outputs.VPCID'
        VPCCIDR: !GetAtt 'VPCStack.Outputs.VPCCIDR'
        NumberOfInstances: '2'
        RemoteAccessCIDR: !Ref 'RemoteAccessCIDR'
        RemoteAccessPort: !If
          - LinuxCond
          - 22
          - 3389
        VipCIDR: !Ref 'VipCIDR'
        VipPort: !Ref 'VipPort'
        HealthURL: !Sub '/var/modules/${SafekitModuleName}/ready.txt'
        PublicSubnet1ID: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
        PrivateIp1 : !Sub
          - '${A}.${B}.${C}.10'
          - A: !Select [0, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet1CIDR' ]]
            B: !Select [1, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet1CIDR' ]]
            C: !Select [2, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet1CIDR' ]]
        PublicSubnet2ID: !GetAtt 'VPCStack.Outputs.PublicSubnet2ID'
        PrivateIp2 : !Sub
          - '${A}.${B}.${C}.10'
          - A: !Select [0, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet2CIDR' ]]
            B: !Select [1, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet2CIDR' ]]
            C: !Select [2, !Split [".", !GetAtt 'VPCStack.Outputs.PublicSubnet2CIDR' ]]
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  StackInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AccessToS3Bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:*Object
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                    - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  StackInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: StackInstanceRole
    Properties:
      Path: /
      Roles:
        - !Ref StackInstanceRole
  Instance1Stack:
    DependsOn: Instance2Stack
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-base-${OSType}.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZone: !Select
          - '0'
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
        CAservPwd: !Ref 'CAservPwd'
        CertificateCN: !Sub
          - 'SafeKit CA ${X} Stack'
          - X: !Select [2, !Split ["/", !Ref 'AWS::StackId' ]]
        InstanceType: !Ref 'InstanceType'
        InstanceNum: '1'
        InstanceName: !Sub '${InstanceNamePrefix}1'
        StackInstanceProfile: !Ref 'StackInstanceProfile'
        StackInstanceRole: !Ref 'StackInstanceRole'
        SecurityGroup: !GetAtt 'NetStack.Outputs.SecurityGroup'
        PublicSubnet: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
        PrivateAddr:  !GetAtt 'NetStack.Outputs.PrivateIp1'
        EIPAllocationId: !GetAtt 'EIP1.AllocationId'
        SafekitModuleURL: !Sub 'https://support.evidian.com/solutions/downloads/safekit/cloud/application_modules/${OSType}/mirror.safe'
        SafekitModuleName: !Ref 'SafekitModuleName'
        ClusterFile: !Join
          - ''
          - - "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
            - "<cluster><lans>\n"
            - "<lan name=\"console\" console=\"on\" command=\"off\" framework=\"off\"\
              \ >\n"
            - !Sub '<node name="${InstanceNamePrefix}1" addr="${EIP1}" />\n'
            - !Sub '<node name="${InstanceNamePrefix}2" addr="${EIP2}" />\n'
            - "</lan>\n"
            - "<lan name=\"default\" console=\"on\" command=\"on\" framework=\"on\"\
              \ >\n"
            - !Sub "<node name=\"${InstanceNamePrefix}1\" addr=\"${NetStack.Outputs.PrivateIp1}\" />\n"
            - !Sub "<node name=\"${InstanceNamePrefix}2\" addr=\"${NetStack.Outputs.PrivateIp2}\" />\n"
            - "</lan>\n"
            - </lans></cluster>
        ConfigScript: !If
          - LinuxCond
          - !Sub
            - |
              #!/bin/bash -ev
              mkdir /var/replicated
              chmod o+rwx /var/replicated
              echo "This file is replicated" >  /var/replicated/rep.txt
              chmod o+rwx /var/replicated/rep.txt
              mv /tmp/userconfig.xml /opt/safekit/modules/${SafekitModuleName}/conf/userconfig.xml
              /opt/safekit/safekit -H "*" -E ${SafekitModuleName}
              /opt/safekit/safekit prim -m ${SafekitModuleName}
              /opt/safekit/safekit -H "${InstanceNamePrefix}2" second -m ${SafekitModuleName}
              /opt/safekit/safekit waitstart -m ${SafekitModuleName}
            - SafekitModuleName: !Ref 'SafekitModuleName'
              InstanceNamePrefix: !Ref 'InstanceNamePrefix'
          - !Sub
            - |
              & mkdir \replicated
              & echo "This file is replicated" >  /replicated/rep.txt
              & move-item -path \safekit\var\tmp\userconfig.xml -destination \safekit\modules\${SafekitModuleName}\conf\userconfig.xml
              & \safekit\safekit -H "*" -E ${SafekitModuleName}
              & \safekit\safekit prim -m ${SafekitModuleName}
              & \safekit\safekit -H "${InstanceNamePrefix}2" second -m ${SafekitModuleName}
              & \safekit\safekit waitstart -m ${SafekitModuleName}
            - SafekitModuleName: !Ref 'SafekitModuleName'
              InstanceNamePrefix: !Ref 'InstanceNamePrefix'
        IpNamesList: !Sub "[\n\"${NetStack.Outputs.DNSName}\",\nnull\n]"
        ConsoleAddrList: !Sub "[\n\"${NetStack.Outputs.PrivateIp1}\",\"${EIP1}\",\n\"${NetStack.Outputs.PrivateIp2}\",\"${EIP2}\",\nnull\n]"
        CommandAddrList: !Sub "[\n\"${NetStack.Outputs.PrivateIp2}\",\nnull\n]"
  Instance2Stack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/safekit-base-${OSType}.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZone: !Select
          - '1'
          - !Ref 'AvailabilityZones'
        KeyPairName: !Ref 'KeyPairName'
        QSS3BucketName: !Ref 'QSS3BucketName'
        QSS3BucketRegion: !Ref 'QSS3BucketRegion'
        QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
        CAservPwd: !Ref 'CAservPwd'
        InstanceType: !Ref 'InstanceType'
        InstanceNum: '2'
        InstanceName: !Sub '${InstanceNamePrefix}2'
        StackInstanceProfile: !Ref 'StackInstanceProfile'
        StackInstanceRole: !Ref 'StackInstanceRole'
        SecurityGroup: !GetAtt 'NetStack.Outputs.SecurityGroup'
        PublicSubnet: !GetAtt 'VPCStack.Outputs.PublicSubnet2ID'
        PrivateAddr: !GetAtt 'NetStack.Outputs.PrivateIp2'
        EIPAllocationId: !GetAtt 'EIP2.AllocationId'
        ConfigScript: !If
          - LinuxCond
          - !Join
            - "\n"
            - - "#!/bin/bash -ev"
              - mkdir /var/replicated
              - chmod o+rwx /var/replicated
          - !Join
            - "\n"
            - - mkdir C:\replicated
Outputs:
  Server1:
    Description: Server 1 IP address
    Value: !Ref 'EIP1'
  Server2:
    Description: Server 2 IP address
    Value: !Ref 'EIP2'
  CredentialsLogin:
    Description: 'Step 1. Get the credentials ( User : CA_admin, Password : Password
      for SafeKit web console certificates )'
    Value: !Join
      - ''
      - - https://
        - !Ref 'EIP1'
        - :9001/adduser.html
  WebConsole:
    Description: Step 2. Start the console
    Value: !Join
      - ''
      - - https://
        - !Ref 'EIP1'
        - :9453/deploy.html?firewallDialog=false
  VIPTest:
    Description: Step 3. Test the Virtual IP
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'NetStack.Outputs.DNSName'
        - :9453
        - !Sub '/cgi-bin/mosaic?arg0=${SafekitModuleName}&mode=mosaic'
  FQDN:
    Description: Virtal IP DNS name
    Value: !GetAtt 'NetStack.Outputs.DNSName'
